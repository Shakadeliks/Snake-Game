{"version":3,"sources":["components/Constants.js","components/Help.js","components/SnakeGame.js","components/useInterval.js","App.js","index.js"],"names":["CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","DIRECTIONS","38","40","37","39","Help","SnakeGame","canvasRef","useRef","useState","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","helpDisplay","setHelpDisplay","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","gameLoop","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","newSnake","newApple","checkAppleCollision","pop","context","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","role","tabIndex","onKeyDown","e","keyCode","moveSnake","style","border","ref","width","height","onClick","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60adb08b.chunk.js","sourcesContent":["const CANVAS_SIZE = [800, 800];\r\nconst SNAKE_START = [\r\n  [8, 7],\r\n  [8, 8]\r\n];\r\nconst APPLE_START = [8, 3];\r\nconst SCALE = 40;\r\nconst SPEED = 100;\r\nconst DIRECTIONS = {\r\n  38: [0, -1], // up\r\n  40: [0, 1], // down\r\n  37: [-1, 0], // left\r\n  39: [1, 0] // right\r\n};\r\n\r\nexport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS\r\n};","import React from 'react'\r\n\r\nfunction Help() {\r\n    return (\r\n        <div>\r\n            <p> The game is simple, maneuver the snake with the arrow keys to eat as many of red apples as you can</p>\r\n\r\n            <p>If you touch the walls with the head of the snake, you die. If the head of the snake touches any part of the snakes body, you die. If you press an arrow key in the opposite direction that the snake is moving, the snake will colide with itself and you die.</p>\r\n\r\n            <p>Press the start game button when you are ready to play and make sure to click on the board if the arrow keys are not mving the snake for you.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useInterval } from './useInterval';\r\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS} from './Constants';\r\nimport { BrowserRouter as Router, Link, Switch, Route} from 'react-router-dom';\r\nimport Help  from './Help'\r\n\r\nconst SnakeGame = () => {\r\n\r\n    const canvasRef = useRef();\r\n    const [snake, setSnake] = useState(SNAKE_START);\r\n    const [apple, setApple] = useState(APPLE_START);\r\n    const [dir, setDir] = useState([0, -1]);\r\n    const [speed, setSpeed] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [helpDisplay, setHelpDisplay] = useState(false);\r\n\r\n    useInterval(() => gameLoop(), speed);\r\n\r\n    const endGame = () => {\r\n        setSpeed(null);\r\n        setGameOver(true);\r\n    };\r\n// FUNCTION TO MOVE THE SNAKE UPON PRESSING ANY OF THE DIRECTION BUTTONS\r\n\r\n    const moveSnake = ({ keyCode }) =>\r\n        keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n//FUNCTION TO CREATE A NEW APPLE ON A RANDOM POSITION ON THE BOARD ONCE THE PREVIOUS HAS BEEN EATEN\r\n\r\n    const createApple = () =>\r\n        apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\r\n    //function checks if the snake head has collided with a wall and to prevent the snake from colliding with itself\r\n\r\n    const checkCollision = (piece, snk = snake) => {\r\n        if (\r\n        piece[0] * SCALE >= CANVAS_SIZE[0] ||\r\n        piece[0] < 0 ||\r\n        piece[1] * SCALE >= CANVAS_SIZE[1] ||\r\n        piece[1] < 0\r\n        )\r\n        return true;\r\n\r\n        for (const segment of snk) {\r\n        if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\r\n        }\r\n        return false;\r\n    };\r\n//checks if the snakes head has collided with the apple\r\n    const checkAppleCollision = newSnake => {\r\n        if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\r\n        let newApple = createApple();\r\n        while (checkCollision(newApple, newSnake)) {\r\n            newApple = createApple();\r\n        }\r\n        setApple(newApple);\r\n        return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const gameLoop = () => {\r\n        // clone of the snake is needed as the snake is represented by the array and its state cannot be modified\r\n\r\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n        snakeCopy.unshift(newSnakeHead);\r\n        if (checkCollision(newSnakeHead)) endGame();\r\n        if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\r\n        setSnake(snakeCopy);\r\n    };\r\n\r\n    const startGame = () => {\r\n        setSnake(SNAKE_START);\r\n        setApple(APPLE_START);\r\n        setDir([0, -1]);\r\n        setSpeed(SPEED);\r\n        setGameOver(false);\r\n    };\r\n// useeffect for the cnvas ref allows for the dimensions needed to make the different parts of the game\r\n    useEffect(() => {\r\n        const context = canvasRef.current.getContext(\"2d\");\r\n        context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n        context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n        context.fillStyle = \"black\";\r\n        snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n        context.fillStyle = \"red\";\r\n        context.fillRect(apple[0], apple[1], 1, 1);\r\n    }, [snake, apple, gameOver]);\r\n\r\n    return (\r\n        <Router>\r\n            <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\r\n            <canvas\r\n                style={{ border: \"1px solid black\" }}\r\n                ref={canvasRef}\r\n                width={`${CANVAS_SIZE[0]}px`}\r\n                height={`${CANVAS_SIZE[1]}px`}\r\n            />\r\n            {gameOver && <div>GAME OVER!</div>}\r\n            <button onClick={startGame}>Start Game</button>\r\n            \r\n            </div>\r\n\r\n            <button onClick={ () => setHelpDisplay(!helpDisplay) }>Help</button>\r\n\r\n            { helpDisplay ? \r\n            <div>\r\n                <p> The game is simple, maneuver the snake with the arrow keys to eat as many of red apples as you can</p>\r\n\r\n                <p>If you touch the walls with the head of the snake, you die. If the head of the snake touches any part of the snakes body, you die. If you press an arrow key in the opposite direction that the snake is moving, the snake will colide with itself and you die.</p>\r\n\r\n                <p>Press the start game button when you are ready to play and make sure to click on the board if the arrow keys are not mving the snake for you.</p>\r\n            </div> : null }\r\n            \r\n        \r\n        </Router>\r\n        \r\n    );\r\n};\r\n\r\nexport default SnakeGame;\r\n","// Custom Hook by Dan Abramov\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import './App.css';\nimport React from 'react'\nimport SnakeGame from './components/SnakeGame'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnakeGame />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}